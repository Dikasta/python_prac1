#quick sort# def quicksort(arr,low, high):#     if low>= high:#         return#     pivot= partition(arr,low,high)#     quicksort(arr,low,pivot-1)#     quicksort(arr,pivot+1,high)# def partition(arr,lo,high):#     pivot1 =arr[lo]#     low = lo+1#     while True:#         while low<=high and pivot1 >= arr[low]:#             low +=1#         while low<= high and pivot1<= arr[high]:#             high-=1##         if low<= high:#             arr[low] , arr[high] = arr[high] , arr[low]#         else:#             break##     arr[lo], arr[high] = arr[high] , arr[lo]#     return high# lst=[9,4,2,5,7,3,6,8,7]# n=len(lst)-1# var=quicksort(lst,0,n)# print(lst) # op [2, 3, 4, 5, 6, 7, 7, 8, 9]# bubble sortdef bubblesort(arr):    for i in range(len(arr)):        for j in range(0,len(arr)-i-1):            if arr[j]>=arr[j+1]:                temp= arr[j]                arr[j]=arr[j+1]                arr[j+1]=templst=[9,4,2,5,7,3,6,8,7]bubblesort(lst)print(lst)# merge sortdef merge(l3):    if len(l3)>1:        mid = len(l3) // 2        left = l3[:mid]        right = l3[mid:]        merge(left)        merge(right)        i = j = k = 0        while i < len(left) and j < len(right):            if left[i] <= right[j]:                l3[k] = left[i]                i += 1            else:                l3[k] = right[j]                j += 1            k += 1        while i < len(left):            l3[k] = lst[i]            i += 1            k += 1        while j < len(right):            l3[k] = right[j]            j += 1            k += 1    return l3l1 = [1,2,3,4,4]l2 = [3,5,6,7,9]l3 =l1+l2#print(l3)lst =[]var = merge(l3)for i in range(len(var)):    print(var[i], end=" ")print()